# -*- coding: utf-8 -*-
"""TASK2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NeDa0fQ2VgbXnaBkvLjkVi-cl4ZeAGMC
"""

import math

def init_board():
    return [' ' for _ in range(9)]

def print_board(board):
    print()
    for row in [board[i*3:(i+1)*3] for i in range(3)]:
        print('| ' + ' | '.join(row) + ' |')
    print()


def check_winner(board):
    winning_positions = [
        [0,1,2], [3,4,5], [6,7,8],
        [0,3,6], [1,4,7], [2,5,8],
        [0,4,8], [2,4,6]
    ]

    for pos in winning_positions:
        if board[pos[0]] == board[pos[1]] == board[pos[2]] != ' ':
            return board[pos[0]]

    if ' ' not in board:
        return 'Draw'

    return None

def minimax(board, depth, is_maximizing):
    result = check_winner(board)
    if result == 'O':
        return 1
    elif result == 'X':
        return -1
    elif result == 'Draw':
        return 0

    if is_maximizing:
        best_score = -math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'O'
                score = minimax(board, depth + 1, False)
                board[i] = ' '
                best_score = max(score, best_score)
        return best_score
    else:
        best_score = math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'X'
                score = minimax(board, depth + 1, True)
                board[i] = ' '
                best_score = min(score, best_score)
        return best_score


def ai_move(board):
    best_score = -math.inf
    move = 0
    for i in range(9):
        if board[i] == ' ':
            board[i] = 'O'
            score = minimax(board, 0, False)
            board[i] = ' '
            if score > best_score:
                best_score = score
                move = i
    board[move] = 'O'

def play_game():
    board = init_board()
    print("Welcome to Tic-Tac-Toe!")
    print_board(board)

    while True:

        try:
            move = int(input("Enter your move (1-9): ")) - 1
        except ValueError:
            print("Please enter a valid number from 1 to 9.")
            continue

        if move not in range(9) or board[move] != ' ':
            print("Invalid move. Try again.")
            continue
        board[move] = 'X'
        print_board(board)

        result = check_winner(board)
        if result:
            if result == 'Draw':
                print("It's a draw!")
            else:
                print(f"{result} wins!")
            break


        ai_move(board)
        print("AI has made its move:")
        print_board(board)

        result = check_winner(board)
        if result:
            if result == 'Draw':
                print("It's a draw!")
            else:
                print(f"{result} wins!")
            break


while True:
    play_game()
    play_again = input("Do you want to play again? (y/n): ").lower()
    if play_again != 'y':
        print("Thanks for playing!")
        break